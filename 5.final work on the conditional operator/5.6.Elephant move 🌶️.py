# Elephant move üå∂Ô∏è
# Given two different squares of a chessboard. Write a program that determines whether a bishop can get from the first square to the second in one move. 
# The program receives as input four numbers from 1 to 8 each, specifying the column number and row number first for the first cell, then for the second cell. 
# The program should output ‚ÄúYES‚Äù if the bishop‚Äôs move from the first cell can get to the second, or ‚ÄúNO‚Äù otherwise.
# Note. The chess bishop moves along diagonals.

# –•–æ–¥ —Å–ª–æ–Ω–∞ üå∂Ô∏è
# –î–∞–Ω—ã –¥–≤–µ —Ä–∞–∑–ª–∏—á–Ω—ã–µ –∫–ª–µ—Ç–∫–∏ —à–∞—Ö–º–∞—Ç–Ω–æ–π –¥–æ—Å–∫–∏. –ù–∞–ø–∏—à–∏—Ç–µ –ø—Ä–æ–≥—Ä–∞–º–º—É, –∫–æ—Ç–æ—Ä–∞—è –æ–ø—Ä–µ–¥–µ–ª—è–µ—Ç, –º–æ–∂–µ—Ç –ª–∏ —Å–ª–æ–Ω –ø–æ–ø–∞—Å—Ç—å —Å –ø–µ—Ä–≤–æ–π –∫–ª–µ—Ç–∫–∏ –Ω–∞ –≤—Ç–æ—Ä—É—é –æ–¥–Ω–∏–º —Ö–æ–¥–æ–º. 
# –ü—Ä–æ–≥—Ä–∞–º–º–∞ –ø–æ–ª—É—á–∞–µ—Ç –Ω–∞ –≤—Ö–æ–¥ —á–µ—Ç—ã—Ä–µ —á–∏—Å–ª–∞ –æ—Ç 1 –¥–æ 8 –∫–∞–∂–¥–æ–µ, –∑–∞–¥–∞—é—â–∏–µ –Ω–æ–º–µ—Ä —Å—Ç–æ–ª–±—Ü–∞ –∏ –Ω–æ–º–µ—Ä —Å—Ç—Ä–æ–∫–∏ —Å–Ω–∞—á–∞–ª–∞ –¥–ª—è –ø–µ—Ä–≤–æ–π –∫–ª–µ—Ç–∫–∏, –ø–æ—Ç–æ–º –¥–ª—è –≤—Ç–æ—Ä–æ–π –∫–ª–µ—Ç–∫–∏. 
# –ü—Ä–æ–≥—Ä–∞–º–º–∞ –¥–æ–ª–∂–Ω–∞ –≤—ã–≤–µ—Å—Ç–∏ ¬´YES¬ª, –µ—Å–ª–∏ –∏–∑ –ø–µ—Ä–≤–æ–π –∫–ª–µ—Ç–∫–∏ —Ö–æ–¥–æ–º —Å–ª–æ–Ω–∞ –º–æ–∂–Ω–æ –ø–æ–ø–∞—Å—Ç—å –≤–æ –≤—Ç–æ—Ä—É—é –∏–ª–∏ ¬´NO¬ª –≤ –ø—Ä–æ—Ç–∏–≤–Ω–æ–º —Å–ª—É—á–∞–µ.
# –ü—Ä–∏–º–µ—á–∞–Ω–∏–µ. –®–∞—Ö–º–∞—Ç–Ω—ã–π —Å–ª–æ–Ω —Ö–æ–¥–∏—Ç –ø–æ –¥–∏–∞–≥–æ–Ω–∞–ª—è–º.


a = int(input())
b = int(input())
c = int(input())
d= int(input())
if a-b==c-d or a+b==c+d:
    print('YES')
else:
    print('NO')
  

Sample Input 1:
4
4
5
5
Sample Output 1:
YES
Sample Input 2:
4
4
5
4
Sample Output 2:
NO
Sample Input 3:
4
4
5
3
Sample Output 3:
YES
